// <auto-generated>
//
// This file was automatically generated by Interoptopus.
//
// Library:      proto_benchy
// Hash:         0xd7797cbe8a8e66ad
// Namespace:    ffi
// Builder:      interoptopus_backend_csharp (0.15.0-alpha.12)
//
// Do not edit this file manually.
//
// </auto-generated>

#pragma warning disable 0105
using System;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using Gen.Ffi;
using Gen.ForCSharp;
using Gen.Wire;
#pragma warning restore 0105

namespace Gen.Ffi
{
    public static partial class Interop
    {
        public const string NativeLib = "proto_benchy";

        static Interop()
        {
        }



        /// Main benchmark Rust entry point for FFI-based interop.
        [LibraryImport(NativeLib, EntryPoint = "FfiRustClient")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial FOutputs FfiRustClient(FInput input);


    }

    public partial class FConfiguration
    {
        public bool is_ok_response;
        public Utf8String host;
        public ulong response_size;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class FConfiguration : IDisposable
    {
        public FConfiguration() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.is_ok_response = (byte) (is_ok_response ? 1 : 0);
            _unmanaged.host = host.IntoUnmanaged();
            _unmanaged.response_size = response_size;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.is_ok_response = (byte) (is_ok_response ? 1 : 0);
            _unmanaged.host = host.AsUnmanaged();
            _unmanaged.response_size = response_size;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte is_ok_response;
            public Utf8String.Unmanaged host;
            public ulong response_size;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FConfiguration IntoManaged()
            {
                var _managed = new FConfiguration();
                _managed.is_ok_response = is_ok_response == 1;
                _managed.host = host.IntoManaged();
                _managed.response_size = response_size;
                return _managed;
            }
        }

        public void Dispose()
        {
            host.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FConfiguration { ... }";
        }

        [CustomMarshaller(typeof(FConfiguration), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FConfiguration _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FConfiguration managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FConfiguration managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FConfiguration ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial struct FContext
    {
        public SliceUtf8String things;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct FContext : IDisposable
    {
        public FContext() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.things = things.ToUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.things = things.ToUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public SliceUtf8String.Unmanaged things;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FContext ToManaged()
            {
                var _managed = new FContext();
                _managed.things = things.ToManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            things.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FContext { ... }";
        }

        [CustomMarshaller(typeof(FContext), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FContext _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FContext managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FContext managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FContext ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class FData
    {
        public FItems items;
        public FError errors;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class FData : IDisposable
    {
        public FData() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.items = items.IntoUnmanaged();
            _unmanaged.errors = errors.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.items = items.AsUnmanaged();
            _unmanaged.errors = errors.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public FItems.Unmanaged items;
            public FError.Unmanaged errors;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FData IntoManaged()
            {
                var _managed = new FData();
                _managed.items = items.IntoManaged();
                _managed.errors = errors.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            items.Dispose();
            errors.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FData { ... }";
        }

        [CustomMarshaller(typeof(FData), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FData _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FData managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FData managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FData ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class FError
    {
        public VecUtf8String error_messages;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class FError : IDisposable
    {
        public FError() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.error_messages = error_messages.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.error_messages = error_messages.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public VecUtf8String.Unmanaged error_messages;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FError IntoManaged()
            {
                var _managed = new FError();
                _managed.error_messages = error_messages.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            error_messages.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FError { ... }";
        }

        [CustomMarshaller(typeof(FError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FError _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FError ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class FInput
    {
        public FContext context;
        public FTable value;
        public FConfiguration configuration;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class FInput : IDisposable
    {
        public FInput() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.context = context.ToUnmanaged();
            _unmanaged.value = value.IntoUnmanaged();
            _unmanaged.configuration = configuration.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.context = context.ToUnmanaged();
            _unmanaged.value = value.AsUnmanaged();
            _unmanaged.configuration = configuration.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public FContext.Unmanaged context;
            public FTable.Unmanaged value;
            public FConfiguration.Unmanaged configuration;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FInput IntoManaged()
            {
                var _managed = new FInput();
                _managed.context = context.ToManaged();
                _managed.value = value.IntoManaged();
                _managed.configuration = configuration.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            context.Dispose();
            value.Dispose();
            configuration.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FInput { ... }";
        }

        [CustomMarshaller(typeof(FInput), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FInput _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FInput managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FInput managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FInput ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial struct FItem
    {
        public FItemKey key;
        public ulong value;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct FItem 
    {
        public FItem() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.key = key.ToUnmanaged();
            _unmanaged.value = value;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.key = key.ToUnmanaged();
            _unmanaged.value = value;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public FItemKey.Unmanaged key;
            public ulong value;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FItem ToManaged()
            {
                var _managed = new FItem();
                _managed.key = key.ToManaged();
                _managed.value = value;
                return _managed;
            }
        }


        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FItem { ... }";
        }

        [CustomMarshaller(typeof(FItem), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FItem _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FItem managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FItem managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FItem ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class FItems
    {
        public VecFItem items;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class FItems : IDisposable
    {
        public FItems() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.items = items.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.items = items.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public VecFItem.Unmanaged items;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FItems IntoManaged()
            {
                var _managed = new FItems();
                _managed.items = items.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            items.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FItems { ... }";
        }

        [CustomMarshaller(typeof(FItems), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FItems _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FItems managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FItems managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FItems ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class FOutputs
    {
        public FResponse response;
        public FData data;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class FOutputs : IDisposable
    {
        public FOutputs() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.response = response.IntoUnmanaged();
            _unmanaged.data = data.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.response = response.AsUnmanaged();
            _unmanaged.data = data.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public FResponse.Unmanaged response;
            public FData.Unmanaged data;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FOutputs IntoManaged()
            {
                var _managed = new FOutputs();
                _managed.response = response.IntoManaged();
                _managed.data = data.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            response.Dispose();
            data.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FOutputs { ... }";
        }

        [CustomMarshaller(typeof(FOutputs), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FOutputs _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FOutputs managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FOutputs managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FOutputs ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class FResponse
    {
        public VecFResult results;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class FResponse : IDisposable
    {
        public FResponse() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.results = results.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.results = results.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public VecFResult.Unmanaged results;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FResponse IntoManaged()
            {
                var _managed = new FResponse();
                _managed.results = results.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            results.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FResponse { ... }";
        }

        [CustomMarshaller(typeof(FResponse), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FResponse _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FResponse managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FResponse managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FResponse ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class FResult
    {
        public int item_value;
        public Utf8String item_id;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class FResult : IDisposable
    {
        public FResult() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.item_value = item_value;
            _unmanaged.item_id = item_id.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.item_value = item_value;
            _unmanaged.item_id = item_id.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public int item_value;
            public Utf8String.Unmanaged item_id;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FResult IntoManaged()
            {
                var _managed = new FResult();
                _managed.item_value = item_value;
                _managed.item_id = item_id.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            item_id.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FResult { ... }";
        }

        [CustomMarshaller(typeof(FResult), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FResult _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FResult managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FResult managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FResult ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class FTable
    {
        public FTableMetadata metadata;
        public SliceU8 byte_array;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class FTable : IDisposable
    {
        public FTable() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.metadata = metadata.IntoUnmanaged();
            _unmanaged.byte_array = byte_array.ToUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.metadata = metadata.AsUnmanaged();
            _unmanaged.byte_array = byte_array.ToUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public FTableMetadata.Unmanaged metadata;
            public SliceU8.Unmanaged byte_array;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FTable IntoManaged()
            {
                var _managed = new FTable();
                _managed.metadata = metadata.IntoManaged();
                _managed.byte_array = byte_array.ToManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            metadata.Dispose();
            byte_array.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FTable { ... }";
        }

        [CustomMarshaller(typeof(FTable), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FTable _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FTable managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FTable managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FTable ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class FTableMetadata
    {
        public int row_count;
        public int column_count;
        public Utf8String guid;
        public Utf8String prefix;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class FTableMetadata : IDisposable
    {
        public FTableMetadata() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.row_count = row_count;
            _unmanaged.column_count = column_count;
            _unmanaged.guid = guid.IntoUnmanaged();
            _unmanaged.prefix = prefix.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.row_count = row_count;
            _unmanaged.column_count = column_count;
            _unmanaged.guid = guid.AsUnmanaged();
            _unmanaged.prefix = prefix.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public int row_count;
            public int column_count;
            public Utf8String.Unmanaged guid;
            public Utf8String.Unmanaged prefix;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe FTableMetadata IntoManaged()
            {
                var _managed = new FTableMetadata();
                _managed.row_count = row_count;
                _managed.column_count = column_count;
                _managed.guid = guid.IntoManaged();
                _managed.prefix = prefix.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            guid.Dispose();
            prefix.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "FTableMetadata { ... }";
        }

        [CustomMarshaller(typeof(FTableMetadata), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private FTableMetadata _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(FTableMetadata managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(FTableMetadata managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public FTableMetadata ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }



}
