// <auto-generated>
//
// This file was automatically generated by Interoptopus.
//
// Library:      proto_benchy
// Hash:         0x6dc53fe0843d9781
// Namespace:    
// Builder:      interoptopus_backend_csharp
//
// Do not edit this file manually.
//
// </auto-generated>


#pragma warning disable 0105
using System;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using Gen.ForCSharp;
#pragma warning restore 0105

namespace Gen.ForCSharp
{
    public static partial class Interop
    {
        public const string NativeLib = "proto_benchy";

        static Interop()
        {
        }



        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_create")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_string_create(IntPtr utf8, ulong len, ref Utf8String rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_destroy")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_string_destroy(Utf8String utf8);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_clone")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_string_clone(ref Utf8String utf8, ref Utf8String rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_18289942533122229086")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_18289942533122229086(IntPtr data, ulong len, ref VecU8 rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_17895994407320212994")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_17895994407320212994(VecU8 ignored);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_1491625606766217421")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_1491625606766217421(IntPtr data, ulong len, ref VecUtf8String rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_2831836161306219799")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_2831836161306219799(VecUtf8String ignored);


        /// Main benchmark Rust entry point for FFI-based ipc.
        [LibraryImport(NativeLib, EntryPoint = "FfiRustClient")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial Outputs FfiRustClient(Input input);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_7869099446262417242")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_7869099446262417242(IntPtr data, ulong len, ref VecItem rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_13849656353968071857")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_13849656353968071857(VecItem ignored);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_10432814826320610706")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_10432814826320610706(IntPtr data, ulong len, ref VecResult rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_12066651607481027978")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_12066651607481027978(VecResult ignored);


    }

    public partial struct ItemKey
    {
        uint _variant;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ItemKey 
    {





        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ItemKey ToManaged()
            {
                var _managed = new ItemKey();
                _managed._variant = _variant;
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            return _unmanaged;
        }

        public static ItemKey TOTAL => new() { _variant = 0 };
        public static ItemKey FIRST => new() { _variant = 1 };
        public static ItemKey SECOND => new() { _variant = 2 };
        public static ItemKey THIRD => new() { _variant = 3 };

        public bool IsTOTAL => _variant == 0;
        public bool IsFIRST => _variant == 1;
        public bool IsSECOND => _variant == 2;
        public bool IsTHIRD => _variant == 3;

        public void AsTOTAL() { if (_variant != 0) throw new InteropException(); }
        public void AsFIRST() { if (_variant != 1) throw new InteropException(); }
        public void AsSECOND() { if (_variant != 2) throw new InteropException(); }
        public void AsTHIRD() { if (_variant != 3) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "TOTAL";
            if (_variant == 1) return "FIRST";
            if (_variant == 2) return "SECOND";
            if (_variant == 3) return "THIRD";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(ItemKey), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ItemKey _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ItemKey managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ItemKey managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ItemKey ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class Configuration
    {
        public bool is_ok_response;
        public Utf8String host;
        public ulong response_size;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Configuration : IDisposable
    {
        public Configuration() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.is_ok_response = (byte) (is_ok_response ? 1 : 0);
            _unmanaged.host = host.IntoUnmanaged();
            _unmanaged.response_size = response_size;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.is_ok_response = (byte) (is_ok_response ? 1 : 0);
            _unmanaged.host = host.AsUnmanaged();
            _unmanaged.response_size = response_size;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte is_ok_response;
            public Utf8String.Unmanaged host;
            public ulong response_size;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Configuration IntoManaged()
            {
                var _managed = new Configuration();
                _managed.is_ok_response = is_ok_response == 1;
                _managed.host = host.IntoManaged();
                _managed.response_size = response_size;
                return _managed;
            }
        }

        public void Dispose()
        {
            host.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Configuration { ... }";
        }

        [CustomMarshaller(typeof(Configuration), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Configuration _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Configuration managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Configuration managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Configuration ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class Context
    {
        public VecUtf8String things;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Context : IDisposable
    {
        public Context() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.things = things.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.things = things.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public VecUtf8String.Unmanaged things;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Context IntoManaged()
            {
                var _managed = new Context();
                _managed.things = things.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            things.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Context { ... }";
        }

        [CustomMarshaller(typeof(Context), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Context _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Context managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Context managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Context ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class Data
    {
        public Items items;
        public Error errors;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Data : IDisposable
    {
        public Data() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.items = items.IntoUnmanaged();
            _unmanaged.errors = errors.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.items = items.AsUnmanaged();
            _unmanaged.errors = errors.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Items.Unmanaged items;
            public Error.Unmanaged errors;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Data IntoManaged()
            {
                var _managed = new Data();
                _managed.items = items.IntoManaged();
                _managed.errors = errors.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            items.Dispose();
            errors.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Data { ... }";
        }

        [CustomMarshaller(typeof(Data), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Data _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Data managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Data managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Data ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class Error
    {
        public VecUtf8String error_messages;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Error : IDisposable
    {
        public Error() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.error_messages = error_messages.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.error_messages = error_messages.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public VecUtf8String.Unmanaged error_messages;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Error IntoManaged()
            {
                var _managed = new Error();
                _managed.error_messages = error_messages.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            error_messages.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Error { ... }";
        }

        [CustomMarshaller(typeof(Error), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Error _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Error managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Error managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Error ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class Input
    {
        public Context context;
        public Table value;
        public Configuration configuration;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Input : IDisposable
    {
        public Input() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.context = context.IntoUnmanaged();
            _unmanaged.value = value.IntoUnmanaged();
            _unmanaged.configuration = configuration.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.context = context.AsUnmanaged();
            _unmanaged.value = value.AsUnmanaged();
            _unmanaged.configuration = configuration.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Context.Unmanaged context;
            public Table.Unmanaged value;
            public Configuration.Unmanaged configuration;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Input IntoManaged()
            {
                var _managed = new Input();
                _managed.context = context.IntoManaged();
                _managed.value = value.IntoManaged();
                _managed.configuration = configuration.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            context.Dispose();
            value.Dispose();
            configuration.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Input { ... }";
        }

        [CustomMarshaller(typeof(Input), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Input _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Input managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Input managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Input ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial struct Item
    {
        public ItemKey key;
        public ulong value;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Item 
    {
        public Item() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.key = key.ToUnmanaged();
            _unmanaged.value = value;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.key = key.ToUnmanaged();
            _unmanaged.value = value;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public ItemKey.Unmanaged key;
            public ulong value;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Item ToManaged()
            {
                var _managed = new Item();
                _managed.key = key.ToManaged();
                _managed.value = value;
                return _managed;
            }
        }


        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Item { ... }";
        }

        [CustomMarshaller(typeof(Item), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Item _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Item managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Item managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Item ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class Items
    {
        public VecItem items;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Items : IDisposable
    {
        public Items() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.items = items.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.items = items.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public VecItem.Unmanaged items;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Items IntoManaged()
            {
                var _managed = new Items();
                _managed.items = items.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            items.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Items { ... }";
        }

        [CustomMarshaller(typeof(Items), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Items _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Items managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Items managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Items ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class Outputs
    {
        public Response response;
        public Data data;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Outputs : IDisposable
    {
        public Outputs() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.response = response.IntoUnmanaged();
            _unmanaged.data = data.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.response = response.AsUnmanaged();
            _unmanaged.data = data.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Response.Unmanaged response;
            public Data.Unmanaged data;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Outputs IntoManaged()
            {
                var _managed = new Outputs();
                _managed.response = response.IntoManaged();
                _managed.data = data.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            response.Dispose();
            data.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Outputs { ... }";
        }

        [CustomMarshaller(typeof(Outputs), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Outputs _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Outputs managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Outputs managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Outputs ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class Response
    {
        public VecResult results;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Response : IDisposable
    {
        public Response() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.results = results.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.results = results.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public VecResult.Unmanaged results;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Response IntoManaged()
            {
                var _managed = new Response();
                _managed.results = results.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            results.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Response { ... }";
        }

        [CustomMarshaller(typeof(Response), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Response _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Response managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Response managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Response ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class Result
    {
        public int item_value;
        public Utf8String item_id;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Result : IDisposable
    {
        public Result() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.item_value = item_value;
            _unmanaged.item_id = item_id.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.item_value = item_value;
            _unmanaged.item_id = item_id.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public int item_value;
            public Utf8String.Unmanaged item_id;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Result IntoManaged()
            {
                var _managed = new Result();
                _managed.item_value = item_value;
                _managed.item_id = item_id.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            item_id.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Result { ... }";
        }

        [CustomMarshaller(typeof(Result), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Result _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Result managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Result managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Result ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class Table
    {
        public TableMetadata metadata;
        public VecU8 byte_array;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Table : IDisposable
    {
        public Table() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.metadata = metadata.IntoUnmanaged();
            _unmanaged.byte_array = byte_array.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.metadata = metadata.AsUnmanaged();
            _unmanaged.byte_array = byte_array.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public TableMetadata.Unmanaged metadata;
            public VecU8.Unmanaged byte_array;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Table IntoManaged()
            {
                var _managed = new Table();
                _managed.metadata = metadata.IntoManaged();
                _managed.byte_array = byte_array.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            metadata.Dispose();
            byte_array.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Table { ... }";
        }

        [CustomMarshaller(typeof(Table), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Table _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Table managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Table managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Table ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public partial class TableMetadata
    {
        public int row_count;
        public int column_count;
        public Utf8String guid;
        public Utf8String prefix;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class TableMetadata : IDisposable
    {
        public TableMetadata() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.row_count = row_count;
            _unmanaged.column_count = column_count;
            _unmanaged.guid = guid.IntoUnmanaged();
            _unmanaged.prefix = prefix.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.row_count = row_count;
            _unmanaged.column_count = column_count;
            _unmanaged.guid = guid.AsUnmanaged();
            _unmanaged.prefix = prefix.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public int row_count;
            public int column_count;
            public Utf8String.Unmanaged guid;
            public Utf8String.Unmanaged prefix;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe TableMetadata IntoManaged()
            {
                var _managed = new TableMetadata();
                _managed.row_count = row_count;
                _managed.column_count = column_count;
                _managed.guid = guid.IntoManaged();
                _managed.prefix = prefix.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            guid.Dispose();
            prefix.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "TableMetadata { ... }";
        }

        [CustomMarshaller(typeof(TableMetadata), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private TableMetadata _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(TableMetadata managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(TableMetadata managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public TableMetadata ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecItem
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecItem : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecItem() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecItem From(Span<Item> _data)
        {
            var rval = new VecItem();
            fixed (void* _data_ptr = _data)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                rval._len = _out._len;
                rval._capacity = _out._capacity;
                rval._ptr = _out._ptr;
            }
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecItem Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Item this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                return Marshal.PtrToStructure<Item>(new IntPtr(_ptr.ToInt64() + i * sizeof(Item)));
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecItem { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_7869099446262417242")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_13849656353968071857")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecItem), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecItem IntoManaged()
            {
                var rval = new VecItem();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecItem _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecItem managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecItem managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecItem ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public static class VecItemExtensions
    {
        public static VecItem Vec(this Item[] s) { return VecItem.From(s); }
    }


    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecResult
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecResult : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecResult() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecResult From(Span<Result> _data)
        {
            var _temp = new Result.Unmanaged[_data.Length];
            for (var i = 0; i < _data.Length; ++i)
            {
                _temp[i] = _data[i].IntoUnmanaged();
            }
            fixed (void* _data_ptr = _temp)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                return _out.IntoManaged();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecResult Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Result this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                var _element = Marshal.PtrToStructure<Result.Unmanaged>(new IntPtr(_ptr.ToInt64() + i * sizeof(Result.Unmanaged)));
                return _element.IntoManaged();
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecResult { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_10432814826320610706")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_12066651607481027978")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecResult), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecResult IntoManaged()
            {
                var rval = new VecResult();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecResult _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecResult managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecResult managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecResult ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }


    }

    public static class VecResultExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static VecResult IntoVec(this Result[] s) { return VecResult.From(s); }
    }


    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecU8
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecU8 : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecU8() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecU8 From(Span<byte> _data)
        {
            var rval = new VecU8();
            fixed (void* _data_ptr = _data)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                rval._len = _out._len;
                rval._capacity = _out._capacity;
                rval._ptr = _out._ptr;
            }
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecU8 Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe byte this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                return Marshal.PtrToStructure<byte>(new IntPtr(_ptr.ToInt64() + i * sizeof(byte)));
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecU8 { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_18289942533122229086")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_17895994407320212994")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecU8 IntoManaged()
            {
                var rval = new VecU8();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecU8 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecU8 ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    public static class VecU8Extensions
    {
        public static VecU8 Vec(this byte[] s) { return VecU8.From(s); }
    }


    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecUtf8String
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecUtf8String : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecUtf8String() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecUtf8String From(Span<Utf8String> _data)
        {
            var _temp = new Utf8String.Unmanaged[_data.Length];
            for (var i = 0; i < _data.Length; ++i)
            {
                _temp[i] = _data[i].IntoUnmanaged();
            }
            fixed (void* _data_ptr = _temp)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                return _out.IntoManaged();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecUtf8String Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Utf8String this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                var _element = Marshal.PtrToStructure<Utf8String.Unmanaged>(new IntPtr(_ptr.ToInt64() + i * sizeof(Utf8String.Unmanaged)));
                return _element.IntoManaged();
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecUtf8String { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_1491625606766217421")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_2831836161306219799")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecUtf8String IntoManaged()
            {
                var rval = new VecUtf8String();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecUtf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecUtf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }


    }

    public static class VecUtf8StringExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static VecUtf8String IntoVec(this Utf8String[] s) { return VecUtf8String.From(s); }
    }




    public class InteropException: Exception
    {

        public InteropException(): base()
        {
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void AsyncHelperNative(IntPtr data, IntPtr callback_data);
    public delegate void AsyncHelperDelegate(IntPtr data);

    public partial struct AsyncHelper
    {
        private AsyncHelperDelegate _managed;
        private AsyncHelperNative _native;
        private IntPtr _ptr;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct AsyncHelper : IDisposable
    {
        public AsyncHelper() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public AsyncHelper(AsyncHelperDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        void Call(IntPtr data, IntPtr _)
        {
            _managed(data);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_ptr);
            _ptr = IntPtr.Zero;
        }

        [CustomMarshaller(typeof(AsyncHelper), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private AsyncHelper _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(AsyncHelper managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed._ptr;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public AsyncHelper ToManaged()
            {
                _managed = new AsyncHelper();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }
    public delegate void AsyncCallbackCommon(IntPtr data, IntPtr callback_data);

    [StructLayout(LayoutKind.Sequential)]
    public partial struct AsyncCallbackCommonNative
    {
        internal IntPtr _ptr;
        internal IntPtr _ts;
    }
    public partial class Utf8String
    {
        IntPtr _ptr;
        ulong _len;
        ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Utf8String: IDisposable
    {
        private Utf8String() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String From(string s)
        {
            var rval = new Utf8String();
            var source = s.AsSpan();
            Span<byte> utf8Bytes = stackalloc byte[Encoding.UTF8.GetByteCount(source)];
            var len = Encoding.UTF8.GetBytes(source, utf8Bytes);

            fixed (byte* p = utf8Bytes)
            {
                InteropHelper.interoptopus_string_create((IntPtr) p, (ulong)len, out var native);
                rval._ptr = native._ptr;
                rval._len = native._len;
                rval._capacity = native._capacity;
            }

            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String Empty()
        {
            InteropHelper.interoptopus_string_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }


        public unsafe string String
        {
            get
            {
                var span = new ReadOnlySpan<byte>((byte*) _ptr, (int)_len);
                var s = Encoding.UTF8.GetString(span);
                return s;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public string IntoString()
        {
            var rval = String;
            Dispose();
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_string_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Utf8String Clone()
        {
            var _new = new Unmanaged();
            var _this = AsUnmanaged();
            InteropHelper.interoptopus_string_clone(ref _this, ref _new);
            return _new.IntoManaged();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) { throw new Exception(); }
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            _ptr = IntPtr.Zero;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr _ptr;
            public ulong _len;
            public ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Utf8String IntoManaged()
            {
                var _managed = new Utf8String();
                _managed._ptr = _ptr;
                _managed._len = _len;
                _managed._capacity = _capacity;
                return _managed;
            }

        }

        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_create")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public static partial long interoptopus_string_create(IntPtr utf8, ulong len, out Unmanaged rval);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_destroy")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public static partial long interoptopus_string_destroy(Unmanaged utf8);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_clone")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public static partial long interoptopus_string_clone(ref Unmanaged orig, ref Unmanaged cloned);
        }

        [CustomMarshaller(typeof(Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Utf8String _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Unmanaged ToUnmanaged()
            {
                return _managed.IntoUnmanaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Utf8String ToManaged()
            {
                return _unmanaged.IntoManaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }

    public static class StringExtensions
    {
        public static Utf8String Utf8(this string s) { return Utf8String.From(s); }
    }

}
