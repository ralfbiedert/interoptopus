// <auto-generated>
//
// This file was automatically generated by Interoptopus.
//
// Library:      core_library
// Hash:         0xacad08a5c1feb91e
// Namespace:    
// Builder:      interoptopus_backend_csharp (0.15.0-alpha.18)
//
// Do not edit this file manually.
//
// </auto-generated>

#pragma warning disable 0105
using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using My.Company;
#pragma warning restore 0105

namespace My.Company
{
    public static partial class Interop
    {
        public const string NativeLib = "core_library";

        static Interop()
        {
        }



        [LibraryImport(NativeLib, EntryPoint = "start_server")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial WireOfReturn start_server(WireOfSomething server_name);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "game_engine_destroy")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultConstPtrGameEngineError game_engine_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "game_engine_new")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultConstPtrGameEngineError game_engine_new();


        [LibraryImport(NativeLib, EntryPoint = "game_engine_place_object")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultError game_engine_place_object(IntPtr _context, [MarshalAs(UnmanagedType.LPStr)] string name, Vec2 position);


        [LibraryImport(NativeLib, EntryPoint = "game_engine_num_objects")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial uint game_engine_num_objects(IntPtr _context);


    }

    public partial struct Error
    {
        uint _variant;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Error 
    {


        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal Error ToManaged()
            {
                var _managed = new Error();
                _managed._variant = _variant;
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            return _unmanaged;
        }

        public static Error Fail => new() { _variant = 0 };

        public bool IsFail => _variant == 0;

        public void AsFail() { if (_variant != 0) throw ExceptionForVariant(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Fail";
            throw new InteropException("Illegal enum state detected. This is a severe error and should never happen.");
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Exception ExceptionForVariant()
        {
            if (_variant == 0) return new EnumException();
            throw new InteropException("Illegal enum state detected. This is a severe error and should never happen.");
        }

        [CustomMarshaller(typeof(Error), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Error _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Error managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Error managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Error ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial struct Vec2
    {
        public float x;
        public float y;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec2 
    {
        public Vec2() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.x = x;
            _unmanaged.y = y;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.x = x;
            _unmanaged.y = y;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
            public float y;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Vec2 ToManaged()
            {
                var _managed = new Vec2();
                _managed.x = x;
                _managed.y = y;
                return _managed;
            }
        }


        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Vec2 { ... }";
        }

        [CustomMarshaller(typeof(Vec2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Vec2 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Vec2 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Vec2 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Vec2 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///FFI buffer for Wire data transfer
    public partial struct WireBuffer
    {
        public IntPtr data;
        public int len;
        public int capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct WireBuffer 
    {
        public WireBuffer() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.data = data;
            _unmanaged.len = len;
            _unmanaged.capacity = capacity;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.data = data;
            _unmanaged.len = len;
            _unmanaged.capacity = capacity;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr data;
            public int len;
            public int capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe WireBuffer ToManaged()
            {
                var _managed = new WireBuffer();
                _managed.data = data;
                _managed.len = len;
                _managed.capacity = capacity;
                return _managed;
            }
        }


        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "WireBuffer { ... }";
        }

        [CustomMarshaller(typeof(WireBuffer), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private WireBuffer _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(WireBuffer managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(WireBuffer managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public WireBuffer ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }


    public partial class Return
    {
        /// 
        uint field;
    }

    public partial class Return
    {
        /// <summary>Empty constructor</summary>
        public Return() { }

        /// <summary>Member-wise initializing constructor</summary>
        public Return(uint field)
        {
            this.field = field;
        }

        public override string ToString()
        {
            return "Return { field = " + field + " }";
        }

        /// <summary>
        /// Deserialize the wire data back to a managed Return object
        /// </summary>
        public static Return Deserialize(BinaryReader reader)
        {
            return new Return {
                
            field = reader.ReadUInt32(),


            };

        }

        /// <summary>
        /// Serialize a Return object into this wire's buffer
        /// </summary>
        public void Serialize(BinaryWriter writer)
        {


            writer.Write(this.field);


        }

        /// <summary>
        /// Calculate the size needed to serialize a Return object
        /// </summary>
        public int CalculateSize()
        {

            return 0
                + 
            4 /* primitive */

            ;

        }
    }

    /// <summary>
    /// Extension methods for Return to Serialize/Deserialize instances
    /// </summary>
    public static class SerdeReturnExtensions
    {
        public static void SerializeReturn(BinaryWriter writer, Return item)
        {
            item.Serialize(writer); 
        }

        public static Return DeserializeReturn(BinaryReader reader)
        {
            return Return.Deserialize(reader); 
        }

        public static int CalculateSize(Return value)
        {
            return value.CalculateSize(); 
        }
    }

    /// <summary>
    /// FFI-safe wire representation for Return.
    /// Mirrors the Rust Wire&lt;Return&gt; structure layout.
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct WireOfReturn
    {
        /// <summary>Pointer to buffer data</summary>
        byte* Data;

        /// <summary>Length of valid data in buffer</summary>
        int Length;

        /// <summary>
        /// Encoded capacity: 0=borrowed, >0=Rust-allocated, <0=C#-allocated (abs value = actual capacity)
        /// </summary>
        int Capacity;
    }

    /// <summary>
    /// FFI-safe wire representation for Return.
    /// Mirrors the Rust Wire&lt;Return&gt; structure layout.
    /// </summary>
    public unsafe partial struct WireOfReturn
    {
        /// <summary>
        /// Create a Wire from a managed Return object with owned buffer
        /// </summary>
        public static WireOfReturn From(Return value)
        {
            var size = value.CalculateSize();
            var buffer = Marshal.AllocHGlobal(size);
            var wire = new WireOfReturn
            {
                Data = (byte*)buffer,
                Length = (int)size,
                Capacity = -(int)size
            };

            try
            {
                value.Serialize(wire.Writer());
                return wire;
            }
            catch
            {
                Marshal.FreeHGlobal(buffer);
                throw;
            }
        }

        /// <summary>
        /// Create a Wire from a managed Return object using provided buffer
        /// </summary>
        public static WireOfReturn From(Return value, byte* buffer, int bufferSize)
        {
            var size = value.CalculateSize();
            if (size > bufferSize)
                throw new ArgumentException($"Buffer size {bufferSize} is too small for data size {size} when serializing Return");

            var wire = new WireOfReturn
            {
                Data = buffer,
                Length = (int)size,
                Capacity = 0 // Indicates borrowed buffer
            };

            value.Serialize(wire.Writer());
            return wire;
        }

        public BinaryReader Reader()
        {
            // UIntPtr Ptr = (UIntPtr)Data;
            // throw new ArgumentException($"Creating a reader for wire with {Length} bytes in it, {Ptr} ptr and {Capacity} capacity");
            var reader = new BinaryReader(new UnmanagedMemoryStream(Data, Length));
            return reader;
        }

        public BinaryWriter Writer()
        {
            var writer = new BinaryWriter(new UnmanagedMemoryStream(Data, Length, Length, FileAccess.Write));
            return writer;
        }

        /// <summary>
        /// Free the buffer if this wire owns it
        /// </summary>
        public void Dispose()
        {
            if (Data != null)
            {
                if (IsOwned) {
                    if (Capacity > 0) {
                        WireInterop.interoptopus_wire_destroy((IntPtr)Data, Length, Capacity);
                    } else {
                        Marshal.FreeHGlobal((IntPtr)Data);
                    }
                }
                Data = null;
                Length = 0;
                Capacity = 0;
            }
        }

        /// <summary>
        /// Check if this wire owns its buffer
        /// </summary>
        public bool IsOwned => Capacity != 0;

        /// <summary>
        /// Check if the wire buffer is empty
        /// </summary>
        public bool IsEmpty => Length == 0;
    }

    /// <summary>
    /// Extension methods for Return to create Wire instances
    /// </summary>
    public static class WireOfReturnExtensions
    {
        /// <summary>
        /// Create a Wire with owned buffer from this Return instance
        /// </summary>
        public static WireOfReturn Wire(this Return value)
        {
            return WireOfReturn.From(value);
        }

        /// <summary>
        /// Create a Wire with borrowed buffer from this Return instance
        /// </summary>
        public static unsafe WireOfReturn WireWithBuffer(this Return value, byte* buffer, int bufferSize)
        {
            return WireOfReturn.From(value, buffer, bufferSize);
        }

        /// <summary>
        /// Calculate the wire size needed for this Return instance
        /// </summary>
        public static int WireSize(this Return value)
        {
            return value.CalculateSize();
        }

        /// <summary>
        /// Unwire a WireOfReturn back to a managed Return object
        /// </summary>
        public static Return Unwire(this WireOfReturn wire)
        {
            return Return.Deserialize(wire.Reader());
        }
    }


    public partial class Something
    {
        /// 
        ushort field;
        /// 
        String name;
    }

    public partial class Something
    {
        /// <summary>Empty constructor</summary>
        public Something() { }

        /// <summary>Member-wise initializing constructor</summary>
        public Something(ushort field, String name)
        {
            this.field = field;
            this.name = name;
        }

        public override string ToString()
        {
            return "Something { field = " + field + ", name = " + name + " }";
        }

        /// <summary>
        /// Deserialize the wire data back to a managed Something object
        /// </summary>
        public static Something Deserialize(BinaryReader reader)
        {
            return new Something {
                
            field = reader.ReadUInt16(),


                name = WireInterop.DeserializeString(reader), /* string */
            };

        }

        /// <summary>
        /// Serialize a Something object into this wire's buffer
        /// </summary>
        public void Serialize(BinaryWriter writer)
        {


            writer.Write(this.field);


            this.name.Serialize(writer); /* string */

        }

        /// <summary>
        /// Calculate the size needed to serialize a Something object
        /// </summary>
        public int CalculateSize()
        {

            return 0
                + 
            2 /* primitive */

                + 
            Marshal.SizeOf<ulong>() + System.Text.Encoding.UTF8.GetByteCount(this.name ?? "") /* string */

            ;

        }
    }

    /// <summary>
    /// Extension methods for Something to Serialize/Deserialize instances
    /// </summary>
    public static class SerdeSomethingExtensions
    {
        public static void SerializeSomething(BinaryWriter writer, Something item)
        {
            item.Serialize(writer); 
        }

        public static Something DeserializeSomething(BinaryReader reader)
        {
            return Something.Deserialize(reader); 
        }

        public static int CalculateSize(Something value)
        {
            return value.CalculateSize(); 
        }
    }

    /// <summary>
    /// FFI-safe wire representation for Something.
    /// Mirrors the Rust Wire&lt;Something&gt; structure layout.
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct WireOfSomething
    {
        /// <summary>Pointer to buffer data</summary>
        byte* Data;

        /// <summary>Length of valid data in buffer</summary>
        int Length;

        /// <summary>
        /// Encoded capacity: 0=borrowed, >0=Rust-allocated, <0=C#-allocated (abs value = actual capacity)
        /// </summary>
        int Capacity;
    }

    /// <summary>
    /// FFI-safe wire representation for Something.
    /// Mirrors the Rust Wire&lt;Something&gt; structure layout.
    /// </summary>
    public unsafe partial struct WireOfSomething
    {
        /// <summary>
        /// Create a Wire from a managed Something object with owned buffer
        /// </summary>
        public static WireOfSomething From(Something value)
        {
            var size = value.CalculateSize();
            var buffer = Marshal.AllocHGlobal(size);
            var wire = new WireOfSomething
            {
                Data = (byte*)buffer,
                Length = (int)size,
                Capacity = -(int)size
            };

            try
            {
                value.Serialize(wire.Writer());
                return wire;
            }
            catch
            {
                Marshal.FreeHGlobal(buffer);
                throw;
            }
        }

        /// <summary>
        /// Create a Wire from a managed Something object using provided buffer
        /// </summary>
        public static WireOfSomething From(Something value, byte* buffer, int bufferSize)
        {
            var size = value.CalculateSize();
            if (size > bufferSize)
                throw new ArgumentException($"Buffer size {bufferSize} is too small for data size {size} when serializing Something");

            var wire = new WireOfSomething
            {
                Data = buffer,
                Length = (int)size,
                Capacity = 0 // Indicates borrowed buffer
            };

            value.Serialize(wire.Writer());
            return wire;
        }

        public BinaryReader Reader()
        {
            // UIntPtr Ptr = (UIntPtr)Data;
            // throw new ArgumentException($"Creating a reader for wire with {Length} bytes in it, {Ptr} ptr and {Capacity} capacity");
            var reader = new BinaryReader(new UnmanagedMemoryStream(Data, Length));
            return reader;
        }

        public BinaryWriter Writer()
        {
            var writer = new BinaryWriter(new UnmanagedMemoryStream(Data, Length, Length, FileAccess.Write));
            return writer;
        }

        /// <summary>
        /// Free the buffer if this wire owns it
        /// </summary>
        public void Dispose()
        {
            if (Data != null)
            {
                if (IsOwned) {
                    if (Capacity > 0) {
                        WireInterop.interoptopus_wire_destroy((IntPtr)Data, Length, Capacity);
                    } else {
                        Marshal.FreeHGlobal((IntPtr)Data);
                    }
                }
                Data = null;
                Length = 0;
                Capacity = 0;
            }
        }

        /// <summary>
        /// Check if this wire owns its buffer
        /// </summary>
        public bool IsOwned => Capacity != 0;

        /// <summary>
        /// Check if the wire buffer is empty
        /// </summary>
        public bool IsEmpty => Length == 0;
    }

    /// <summary>
    /// Extension methods for Something to create Wire instances
    /// </summary>
    public static class WireOfSomethingExtensions
    {
        /// <summary>
        /// Create a Wire with owned buffer from this Something instance
        /// </summary>
        public static WireOfSomething Wire(this Something value)
        {
            return WireOfSomething.From(value);
        }

        /// <summary>
        /// Create a Wire with borrowed buffer from this Something instance
        /// </summary>
        public static unsafe WireOfSomething WireWithBuffer(this Something value, byte* buffer, int bufferSize)
        {
            return WireOfSomething.From(value, buffer, bufferSize);
        }

        /// <summary>
        /// Calculate the wire size needed for this Something instance
        /// </summary>
        public static int WireSize(this Something value)
        {
            return value.CalculateSize();
        }

        /// <summary>
        /// Unwire a WireOfSomething back to a managed Something object
        /// </summary>
        public static Something Unwire(this WireOfSomething wire)
        {
            return Something.Deserialize(wire.Reader());
        }
    }

    ///Result that contains value or an error.
    public partial struct ResultConstPtrGameEngineError
    {
        uint _variant;
        IntPtr _Ok;
        Error _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrGameEngineError 
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal IntPtr _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Error.Unmanaged _Err;
        }




        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultConstPtrGameEngineError ToManaged()
            {
                var _managed = new ResultConstPtrGameEngineError();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Ok = _Ok._Ok;
                if (_variant == 1) _managed._Err = _Err._Err.ToManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            if (_variant == 1) _unmanaged._Err._Err = _Err.ToUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            if (_variant == 1) _unmanaged._Err._Err = _Err.ToUnmanaged();
            return _unmanaged;
        }

        public static ResultConstPtrGameEngineError Ok(IntPtr value) => new() { _variant = 0, _Ok = value };
        public static ResultConstPtrGameEngineError Err(Error value) => new() { _variant = 1, _Err = value };
        public static ResultConstPtrGameEngineError Panic => new() { _variant = 2 };
        public static ResultConstPtrGameEngineError Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public IntPtr AsOk() { if (_variant != 0) { throw ExceptionForVariant(); } else { return _Ok; } }
        public Error AsErr() { if (_variant != 1) { throw ExceptionForVariant(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw ExceptionForVariant(); }
        public void AsNull() { if (_variant != 3) throw ExceptionForVariant(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return $"Err({AsErr().ToString()})";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException("Illegal enum state detected. This is a severe error and should never happen.");
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Exception ExceptionForVariant()
        {
            if (_variant == 0) return new EnumException<IntPtr>(_Ok);
            if (_variant == 1) return new EnumException<Error>(_Err);
            if (_variant == 2) return new EnumException();
            if (_variant == 3) return new EnumException();
            throw new InteropException("Illegal enum state detected. This is a severe error and should never happen.");
        }

        [CustomMarshaller(typeof(ResultConstPtrGameEngineError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrGameEngineError _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultConstPtrGameEngineError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultConstPtrGameEngineError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultConstPtrGameEngineError ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Result that contains value or an error.
    public partial struct ResultError
    {
        uint _variant;
        Error _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultError 
    {

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Error.Unmanaged _Err;
        }




        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultError ToManaged()
            {
                var _managed = new ResultError();
                _managed._variant = _variant;
                if (_variant == 1) _managed._Err = _Err._Err.ToManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 1) _unmanaged._Err._Err = _Err.ToUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 1) _unmanaged._Err._Err = _Err.ToUnmanaged();
            return _unmanaged;
        }

        public static ResultError Ok => new() { _variant = 0 };
        public static ResultError Err(Error value) => new() { _variant = 1, _Err = value };
        public static ResultError Panic => new() { _variant = 2 };
        public static ResultError Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public void AsOk() { if (_variant != 0) throw ExceptionForVariant(); }
        public Error AsErr() { if (_variant != 1) { throw ExceptionForVariant(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw ExceptionForVariant(); }
        public void AsNull() { if (_variant != 3) throw ExceptionForVariant(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return $"Err({AsErr().ToString()})";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException("Illegal enum state detected. This is a severe error and should never happen.");
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Exception ExceptionForVariant()
        {
            if (_variant == 0) return new EnumException();
            if (_variant == 1) return new EnumException<Error>(_Err);
            if (_variant == 2) return new EnumException();
            if (_variant == 3) return new EnumException();
            throw new InteropException("Illegal enum state detected. This is a severe error and should never happen.");
        }

        [CustomMarshaller(typeof(ResultError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultError _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultError ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }


    public partial class GameEngine : IDisposable
    {
        private IntPtr _context;

        private GameEngine() {}

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static GameEngine New()
        {
            var self = new GameEngine();
            self._context = Interop.game_engine_new().AsOk();
            return self;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            Interop.game_engine_destroy(_context).AsOk();
            _context = IntPtr.Zero;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void PlaceObject([MarshalAs(UnmanagedType.LPStr)] string name, Vec2 position)
        {
            Interop.game_engine_place_object(_context, name, position).AsOk();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public uint NumObjects()
        {
            return Interop.game_engine_num_objects(_context);
        }

        public IntPtr Context => _context;
    }




    public class EnumException() : InteropException($"Enum variant mismatch.")  { }

    public class EnumException<T>(T t) : InteropException($"Enum variant mismatch.")
    {
        public T Value { get; } = t;
    }

    public class InteropException(string text) : Exception(text) { }
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void AsyncHelperNative(IntPtr data, IntPtr callback_data);
    public delegate void AsyncHelperDelegate(IntPtr data);

    public partial struct AsyncHelper
    {
        private AsyncHelperDelegate _managed;
        private AsyncHelperNative _native;
        private IntPtr _ptr;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct AsyncHelper : IDisposable
    {
        public AsyncHelper() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public AsyncHelper(AsyncHelperDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        void Call(IntPtr data, IntPtr _)
        {
            _managed(data);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_ptr);
            _ptr = IntPtr.Zero;
        }

        [CustomMarshaller(typeof(AsyncHelper), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private AsyncHelper _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(AsyncHelper managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed._ptr;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public AsyncHelper ToManaged()
            {
                _managed = new AsyncHelper();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }

    public delegate void AsyncCallbackCommon(IntPtr data, IntPtr callback_data);

    [StructLayout(LayoutKind.Sequential)]
    public partial struct AsyncCallbackCommonNative
    {
        internal IntPtr _ptr;
        internal IntPtr _ts;
    }
    public partial class Utf8String
    {
        IntPtr _ptr;
        ulong _len;
        ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Utf8String : IDisposable
    {
        private Utf8String() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String From(string s)
        {
            var rval = new Utf8String();
            var source = s.AsSpan();
            Span<byte> utf8Bytes = stackalloc byte[Encoding.UTF8.GetByteCount(source)];
            var len = Encoding.UTF8.GetBytes(source, utf8Bytes);

            fixed (byte* p = utf8Bytes)
            {
                InteropHelper.interoptopus_string_create((IntPtr)p, (ulong)len, out var native);
                rval._ptr = native._ptr;
                rval._len = native._len;
                rval._capacity = native._capacity;
            }

            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String Empty()
        {
            InteropHelper.interoptopus_string_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }


        public unsafe string String
        {
            get
            {
                var span = new ReadOnlySpan<byte>((byte*)_ptr, (int)_len);
                var s = Encoding.UTF8.GetString(span);
                return s;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public string IntoString()
        {
            var rval = String;
            Dispose();
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_string_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Utf8String Clone()
        {
            var _new = new Unmanaged();
            var _this = AsUnmanaged();
            InteropHelper.interoptopus_string_clone(ref _this, ref _new);
            return _new.IntoManaged();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) { throw new Exception(); }
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            _ptr = IntPtr.Zero;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr _ptr;
            public ulong _len;
            public ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Utf8String IntoManaged()
            {
                var _managed = new Utf8String();
                _managed._ptr = _ptr;
                _managed._len = _len;
                _managed._capacity = _capacity;
                return _managed;
            }

        }

        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_create")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            
            public static partial long interoptopus_string_create(IntPtr utf8, ulong len, out Unmanaged rval);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_destroy")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            
            public static partial long interoptopus_string_destroy(Unmanaged utf8);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_clone")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            
            public static partial long interoptopus_string_clone(ref Unmanaged orig, ref Unmanaged cloned);
        }

        [CustomMarshaller(typeof(Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Utf8String _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Unmanaged ToUnmanaged()
            {
                return _managed.IntoUnmanaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Utf8String ToManaged()
            {
                return _unmanaged.IntoManaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }

    public static class StringExtensions
    {
        public static Utf8String Utf8(this string s) { return Utf8String.From(s); }
    }

    public partial class WireInterop {
        [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_wire_destroy")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial void interoptopus_wire_destroy(IntPtr data, int len, int capacity);

        #region Serialization Helpers
        #nullable enable

        public static void SerializeString(BinaryWriter writer, string value)
        {
            if (value == null)
            {
                writer.Write((ulong)0);
                return;
            }

            var bytes = Encoding.UTF8.GetBytes(value);
            writer.Write((ulong)bytes.Length);
            writer.Write(bytes);
        }

        public static string DeserializeString(BinaryReader reader)
        {
            var length = reader.ReadUInt64();
            if (length == 0)
                return string.Empty;

            var bytes = reader.ReadBytes((int)length);
            return Encoding.UTF8.GetString(bytes);
        }

        public static void SerializeVecOfByte(BinaryWriter writer, byte[] vec)
        {
            writer.Write((ulong)vec.Length);
            writer.Write(vec);
        }

        public static void SerializeVec<T>(BinaryWriter writer, IList<T> value, Action<BinaryWriter, T> serializeItem)
        {
            if (value == null)
            {
                writer.Write((ulong)0);
                return;
            }

            writer.Write((ulong)value.Count);
            foreach (var item in value)
            {
                serializeItem(writer, item);
            }
        }

        public static byte[] DeserializeVecOfByte(BinaryReader reader)
        {
            var length = reader.ReadUInt64();
            return reader.ReadBytes((int)length);
        }

        public static T[] DeserializeVec<T>(BinaryReader reader, Func<BinaryReader, T> deserializeItem)
        {
            var length = reader.ReadUInt64();
            var result = new T[(int)length];

            for (ulong i = 0; i < length; i++)
            {
                result[i] = deserializeItem(reader);
            }

            return result;
        }

        public static void SerializeMap<K,V>(BinaryWriter writer, IDictionary<K,V> value, Action<BinaryWriter, K> serializeKey, Action<BinaryWriter, V> serializeValue)
        {
            if (value == null)
            {
                writer.Write((ulong)0);
                return;
            }

            writer.Write((ulong)value.Count);
            foreach (var item in value)
            {
                serializeKey(writer, item.Key);
                serializeValue(writer, item.Value);
            }
        }

        public static Dictionary<K,V> DeserializeMap<K,V>(BinaryReader reader, Func<BinaryReader, K> deserializeKey, Func<BinaryReader, V> deserializeValue)
        {
            var length = reader.ReadUInt64();
            var result = new Dictionary<K,V>((int)length);

            for (ulong i = 0; i < length; i++)
            {
                var k = deserializeKey(reader);
                var v = deserializeValue(reader);
                result.Add(k, v);
            }

            return result;
        }

        public static void SerializeOptional<T>(BinaryWriter writer, T? value, Action<BinaryWriter, T> serializeItem)
        {
            if (value != null)
            {
                writer.Write((byte)1);
                serializeItem(writer, value);
            }
            else
            {
                writer.Write((byte)0);
            }
        }

        #nullable enable
        public static T? DeserializeOptional<T>(BinaryReader reader, Func<BinaryReader, T> deserializeValue)
        {
            var hasValue = reader.ReadByte() != 0;
            if (hasValue)
            {
                return deserializeValue(reader);
            }
            return default;
        }
        #nullable restore

        public static T? DeserializeEnum<T>(BinaryReader reader) where T: System.Enum
        {
            var discriminant = reader.ReadInt32();
            if (Enum.IsDefined(typeof(T), discriminant))
            {
                return (T)Enum.ToObject(typeof(T), discriminant);
            }
            return default(T);
        }

        public static int CalculateVariableMapSize<K,V>(IDictionary<K,V> value, Func<K, int> calculateKeySize, Func<V, int> calculateValueSize)
        {
            int size = Marshal.SizeOf<ulong>(); // length field
            if (value == null) return size;

            foreach (var item in value)
            {
                size +=
                    calculateKeySize(item.Key)
                    + calculateValueSize(item.Value);}
            return size;
        }

        /// This method is called only for non-primitive inner types which require size calculations.
        public static int CalculateVariableVecSize<T>(IList<T> value, Func<T, int> calculateItemSize)
        {
            int size = Marshal.SizeOf<ulong>(); // length field
            if (value == null) return size;foreach (var item in value)
            {
                size += calculateItemSize(item);
            }
            return size;
        }

        #nullable restore
        #endregion
    }

    public static class SerdeStringExtensions
    {
        public static void Serialize(this String value, BinaryWriter writer) {
            WireInterop.SerializeString(writer, value);
        }

        public static String DeserializeString(BinaryReader reader) {
            return WireInterop.DeserializeString(reader);
        }

        public static int CalculateSize(String value) {
            return Marshal.SizeOf<ulong>() + System.Text.Encoding.UTF8.GetByteCount(value ?? "");
        }
    }
}
