// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using My.Company;
using My.Company.Common;
#pragma warning restore 0105

namespace My.Company
{
    public static partial class Interop
    {
        public const string NativeLib = "interoptopus_reference_project";

        static Interop()
        {
            var api_version = Interop.pattern_api_guard();
            if (api_version != 12952263558137678611ul)
            {
                throw new TypeLoadException($"API reports hash {api_version} which differs from hash in bindings (12952263558137678611). You probably forgot to update / copy either the bindings or the library.");
            }
        }

        public const byte U8 = (byte) 255;

        public const float F32_MIN_POSITIVE = (float) 0.000000000000000000000000000000000000011754944;

        public const int COMPUTED_I32 = (int) -2147483647;


        [LibraryImport(NativeLib, EntryPoint = "primitive_void")]
        public static partial void primitive_void();

        [LibraryImport(NativeLib, EntryPoint = "primitive_void2")]
        public static partial void primitive_void2();

        [LibraryImport(NativeLib, EntryPoint = "primitive_bool")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool primitive_bool([MarshalAs(UnmanagedType.U1)] bool x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_u8")]
        public static partial byte primitive_u8(byte x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_u16")]
        public static partial ushort primitive_u16(ushort x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_u32")]
        public static partial uint primitive_u32(uint x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_u64")]
        public static partial ulong primitive_u64(ulong x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_i8")]
        public static partial sbyte primitive_i8(sbyte x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_i16")]
        public static partial short primitive_i16(short x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_i32")]
        public static partial int primitive_i32(int x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_i64")]
        public static partial long primitive_i64(long x);

        [LibraryImport(NativeLib, EntryPoint = "packed_to_packed1")]
        public static partial Packed2 packed_to_packed1(Packed1 a);

        [LibraryImport(NativeLib, EntryPoint = "many_args_5")]
        public static partial long many_args_5(long x0, long x1, long x2, long x3, long x4);

        [LibraryImport(NativeLib, EntryPoint = "many_args_10")]
        public static partial long many_args_10(long x0, long x1, long x2, long x3, long x4, long x5, long x6, long x7, long x8, long x9);

        [LibraryImport(NativeLib, EntryPoint = "ptr")]
        public static partial IntPtr ptr(ref long x);

        /// # Safety
        ///
        /// Parameter x must point to valid data.
        [LibraryImport(NativeLib, EntryPoint = "ptr_mut")]
        public static partial IntPtr ptr_mut(out long x);

        [LibraryImport(NativeLib, EntryPoint = "ptr_ptr")]
        public static partial IntPtr ptr_ptr(ref IntPtr x);

        [LibraryImport(NativeLib, EntryPoint = "ref_simple")]
        public static partial IntPtr ref_simple(ref long x);

        [LibraryImport(NativeLib, EntryPoint = "ref_mut_simple")]
        public static partial IntPtr ref_mut_simple(out long x);

        [LibraryImport(NativeLib, EntryPoint = "ref_option")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ref_option(ref long x);

        [LibraryImport(NativeLib, EntryPoint = "ref_mut_option")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ref_mut_option(out long x);

        [LibraryImport(NativeLib, EntryPoint = "call_tupled")]
        public static partial Tupled call_tupled(Tupled x);

        [LibraryImport(NativeLib, EntryPoint = "complex_args_1")]
        public static partial FFIError complex_args_1(Vec3f32 a, ref Tupled b);

        public static unsafe void complex_args_1_checked(Vec3f32 a, ref Tupled b)
        {
            var rval = complex_args_1(a, ref b);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "callback")]
        public static partial byte callback(InteropDelegate_fn_u8_rval_u8 callback, byte value);

        [LibraryImport(NativeLib, EntryPoint = "generic_1a")]
        public static partial uint generic_1a(Genericu32 x, Phantomu8 y);

        [LibraryImport(NativeLib, EntryPoint = "generic_1b")]
        public static partial byte generic_1b(Genericu8 x, Phantomu8 y);

        [LibraryImport(NativeLib, EntryPoint = "generic_1c")]
        public static partial byte generic_1c(ref Genericu8 x, ref Genericu8 y);

        [LibraryImport(NativeLib, EntryPoint = "generic_2")]
        public static partial byte generic_2(IntPtr x);

        [LibraryImport(NativeLib, EntryPoint = "generic_3")]
        public static partial byte generic_3(IntPtr x);

        [LibraryImport(NativeLib, EntryPoint = "generic_4")]
        public static partial byte generic_4(IntPtr x);

        [LibraryImport(NativeLib, EntryPoint = "array_1")]
        public static partial byte array_1(Array x);

        [LibraryImport(NativeLib, EntryPoint = "array_2")]
        public static partial Array array_2();

        [LibraryImport(NativeLib, EntryPoint = "array_3")]
        public static partial void array_3(out Array arr);

        [LibraryImport(NativeLib, EntryPoint = "nested_array_1")]
        public static partial NestedArray nested_array_1();

        [LibraryImport(NativeLib, EntryPoint = "nested_array_2")]
        public static partial void nested_array_2(out NestedArray result);

        [LibraryImport(NativeLib, EntryPoint = "nested_array_3")]
        public static partial byte nested_array_3(NestedArray input);

        [LibraryImport(NativeLib, EntryPoint = "char_array_1")]
        public static partial CharArray char_array_1();

        [LibraryImport(NativeLib, EntryPoint = "char_array_2")]
        public static partial CharArray char_array_2(CharArray arr);

        [LibraryImport(NativeLib, EntryPoint = "char_array_3")]
        public static partial byte char_array_3(ref CharArray arr);

        /// This function has documentation.
        [LibraryImport(NativeLib, EntryPoint = "documented")]
        public static partial EnumDocumented documented(StructDocumented x);

        [LibraryImport(NativeLib, EntryPoint = "ambiguous_1")]
        public static partial Vec1 ambiguous_1(Vec1 x);

        [LibraryImport(NativeLib, EntryPoint = "ambiguous_2")]
        public static partial Vec2 ambiguous_2(Vec2 x);

        [LibraryImport(NativeLib, EntryPoint = "ambiguous_3")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ambiguous_3(Vec1 x, Vec2 y);

        [LibraryImport(NativeLib, EntryPoint = "namespaced_type")]
        public static partial Vec namespaced_type(Vec x);

        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_option")]
        public static partial OptionVec namespaced_inner_option(OptionVec x);

        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_slice")]
        public static partial SliceVec namespaced_inner_slice(SliceVec x);

        public static unsafe SliceVec namespaced_inner_slice(System.ReadOnlySpan<Vec> x)
        {
            fixed (void* ptr_x = x)
            {
                var x_slice = new SliceVec(new IntPtr(ptr_x), (ulong) x.Length);
                return namespaced_inner_slice(x_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_slice_mut")]
        public static partial SliceMutVec namespaced_inner_slice_mut(SliceMutVec x);

        public static unsafe SliceMutVec namespaced_inner_slice_mut(System.Span<Vec> x)
        {
            fixed (void* ptr_x = x)
            {
                var x_slice = new SliceMutVec(new IntPtr(ptr_x), (ulong) x.Length);
                return namespaced_inner_slice_mut(x_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "panics")]
        public static partial FFIError panics();

        public static unsafe void panics_checked()
        {
            var rval = panics();;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "renamed")]
        public static partial EnumRenamed renamed(StructRenamed x);

        [LibraryImport(NativeLib, EntryPoint = "sleep")]
        public static partial void sleep(ulong millis);

        [LibraryImport(NativeLib, EntryPoint = "weird_1")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool weird_1(Weird1u32 x, Weird2u8 y);

        [LibraryImport(NativeLib, EntryPoint = "visibility")]
        public static partial void visibility(Visibility1 x, Visibility2 y);

        [LibraryImport(NativeLib, EntryPoint = "repr_transparent")]
        public static partial Tupled repr_transparent(Tupled x, ref Tupled r);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_1")]
        public static partial uint pattern_ascii_pointer_1([MarshalAs(UnmanagedType.LPStr)] string x);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_2")]
        public static partial IntPtr pattern_ascii_pointer_2();

        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_return_slice")]
        public static partial SliceUseAsciiStringPattern pattern_ascii_pointer_return_slice();

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_1")]
        public static partial uint pattern_ffi_slice_1(SliceU32 ffi_slice);

        public static unsafe uint pattern_ffi_slice_1(System.ReadOnlySpan<uint> ffi_slice)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceU32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                return pattern_ffi_slice_1(ffi_slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_1b")]
        public static partial uint pattern_ffi_slice_1b(SliceMutU32 ffi_slice);

        public static unsafe uint pattern_ffi_slice_1b(System.Span<uint> ffi_slice)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceMutU32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                return pattern_ffi_slice_1b(ffi_slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_2")]
        public static partial Vec3f32 pattern_ffi_slice_2(SliceVec3f32 ffi_slice, int i);

        public static unsafe Vec3f32 pattern_ffi_slice_2(System.ReadOnlySpan<Vec3f32> ffi_slice, int i)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceVec3f32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                return pattern_ffi_slice_2(ffi_slice_slice, i);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_3")]
        public static partial void pattern_ffi_slice_3(SliceMutU8 slice, CallbackSliceMut callback);

        public static unsafe void pattern_ffi_slice_3(System.Span<byte> slice, CallbackSliceMut callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                pattern_ffi_slice_3(slice_slice, callback);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_4")]
        public static partial void pattern_ffi_slice_4(SliceU8 slice, SliceMutU8 slice2);

        public static unsafe void pattern_ffi_slice_4(System.ReadOnlySpan<byte> slice, System.Span<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceMutU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    pattern_ffi_slice_4(slice_slice, slice2_slice);;
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_5")]
        public static partial void pattern_ffi_slice_5(ref SliceU8 slice, ref SliceMutU8 slice2);

        public static unsafe void pattern_ffi_slice_5(System.ReadOnlySpan<byte> slice, System.Span<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceMutU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    pattern_ffi_slice_5(ref slice_slice, ref slice2_slice);;
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_6")]
        public static partial void pattern_ffi_slice_6(ref SliceMutU8 slice, CallbackU8 callback);

        public static unsafe void pattern_ffi_slice_6(System.Span<byte> slice, CallbackU8 callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                pattern_ffi_slice_6(ref slice_slice, callback);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_delegate")]
        public static partial byte pattern_ffi_slice_delegate(CallbackFFISlice callback);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_delegate_huge")]
        public static partial Vec3f32 pattern_ffi_slice_delegate_huge(CallbackHugeVecSlice callback);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_option_1")]
        public static partial OptionInner pattern_ffi_option_1(OptionInner ffi_slice);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_option_2")]
        public static partial Inner pattern_ffi_option_2(OptionInner ffi_slice);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_bool")]
        public static partial Bool pattern_ffi_bool(Bool ffi_bool);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar")]
        public static partial sbyte pattern_ffi_cchar(sbyte ffi_cchar);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar_const_pointer")]
        public static partial IntPtr pattern_ffi_cchar_const_pointer(IntPtr ffi_cchar);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar_mut_pointer")]
        public static partial IntPtr pattern_ffi_cchar_mut_pointer(IntPtr ffi_cchar);

        [LibraryImport(NativeLib, EntryPoint = "pattern_api_guard")]
        public static partial ulong pattern_api_guard();

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_1")]
        public static partial uint pattern_callback_1(MyCallback callback, uint x);

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_2")]
        public static partial MyCallbackVoid pattern_callback_2(MyCallbackVoid callback);

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_4")]
        public static partial uint pattern_callback_4(MyCallbackNamespaced callback, uint x);

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_5")]
        public static partial SumDelegate1 pattern_callback_5();

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_6")]
        public static partial SumDelegate2 pattern_callback_6();

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_7")]
        public static partial FFIError pattern_callback_7(SumDelegateReturn c1, SumDelegateReturn2 c2, int x, int i, out int o);

        public static unsafe void pattern_callback_7_checked(SumDelegateReturn c1, SumDelegateReturn2 c2, int x, int i, out int o)
        {
            var c1_safe_delegate = new SumDelegateReturnExceptionSafe(c1);
            var rval = pattern_callback_7(c1_safe_delegate.Call, c2, x, i, out o);;
            c1_safe_delegate.Rethrow();
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_surrogates_1")]
        public static partial void pattern_surrogates_1(Local s, out Container c);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "basic_service_destroy")]
        public static partial FFIError basic_service_destroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static unsafe void basic_service_destroy_checked(ref IntPtr context)
        {
            var rval = basic_service_destroy(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "basic_service_new")]
        public static partial FFIError basic_service_new(ref IntPtr context);

        public static unsafe void basic_service_new_checked(ref IntPtr context)
        {
            var rval = basic_service_new(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_destroy")]
        public static partial FFIError service_on_panic_destroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static unsafe void service_on_panic_destroy_checked(ref IntPtr context)
        {
            var rval = service_on_panic_destroy(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_new")]
        public static partial FFIError service_on_panic_new(ref IntPtr context);

        public static unsafe void service_on_panic_new_checked(ref IntPtr context)
        {
            var rval = service_on_panic_new(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_result")]
        public static partial FFIError service_on_panic_return_result(IntPtr context, uint anon1);

        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        public static unsafe void service_on_panic_return_result_checked(IntPtr context, uint anon1)
        {
            var rval = service_on_panic_return_result(context, anon1);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Methods returning a value need an `on_panic` annotation.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_default_value")]
        public static partial uint service_on_panic_return_default_value(IntPtr context, uint x);

        /// This function has no panic safeguards. It will be a bit faster to
        /// call, but if it panics your host app will be in an undefined state.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_ub_on_panic")]
        public static partial IntPtr service_on_panic_return_ub_on_panic(IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_destroy")]
        public static partial FFIError service_callbacks_destroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static unsafe void service_callbacks_destroy_checked(ref IntPtr context)
        {
            var rval = service_callbacks_destroy(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_new")]
        public static partial FFIError service_callbacks_new(ref IntPtr context);

        public static unsafe void service_callbacks_new_checked(ref IntPtr context)
        {
            var rval = service_callbacks_new(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_simple")]
        public static partial FFIError service_callbacks_callback_simple(IntPtr context, MyCallback callback);

        public static unsafe void service_callbacks_callback_simple_checked(IntPtr context, MyCallback callback)
        {
            var rval = service_callbacks_callback_simple(context, callback);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_ffi_return")]
        public static partial FFIError service_callbacks_callback_ffi_return(IntPtr context, SumDelegateReturn callback);

        public static unsafe void service_callbacks_callback_ffi_return_checked(IntPtr context, SumDelegateReturn callback)
        {
            var callback_safe_delegate = new SumDelegateReturnExceptionSafe(callback);
            var rval = service_callbacks_callback_ffi_return(context, callback_safe_delegate.Call);;
            callback_safe_delegate.Rethrow();
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_with_slice")]
        public static partial FFIError service_callbacks_callback_with_slice(IntPtr context, SumDelegateReturn callback, SliceI32 input);

        public static unsafe void service_callbacks_callback_with_slice(IntPtr context, SumDelegateReturn callback, System.ReadOnlySpan<int> input)
        {
            var callback_safe_delegate = new SumDelegateReturnExceptionSafe(callback);
            fixed (void* ptr_input = input)
            {
                var input_slice = new SliceI32(new IntPtr(ptr_input), (ulong) input.Length);
                var rval = service_callbacks_callback_with_slice(context, callback_safe_delegate.Call, input_slice);;
                callback_safe_delegate.Rethrow();
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_invoke_delegates")]
        public static partial FFIError service_callbacks_invoke_delegates(IntPtr context);

        public static unsafe void service_callbacks_invoke_delegates_checked(IntPtr context)
        {
            var rval = service_callbacks_invoke_delegates(context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_ignoring_methods_destroy")]
        public static partial FFIError service_ignoring_methods_destroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static unsafe void service_ignoring_methods_destroy_checked(ref IntPtr context)
        {
            var rval = service_ignoring_methods_destroy(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_ignoring_methods_new")]
        public static partial FFIError service_ignoring_methods_new(ref IntPtr context);

        public static unsafe void service_ignoring_methods_new_checked(ref IntPtr context)
        {
            var rval = service_ignoring_methods_new(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_destroy")]
        public static partial FFIError service_multiple_ctors_destroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static unsafe void service_multiple_ctors_destroy_checked(ref IntPtr context)
        {
            var rval = service_multiple_ctors_destroy(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_with")]
        public static partial FFIError service_multiple_ctors_new_with(ref IntPtr context, uint some_value);

        public static unsafe void service_multiple_ctors_new_with_checked(ref IntPtr context, uint some_value)
        {
            var rval = service_multiple_ctors_new_with(ref context, some_value);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_without")]
        public static partial FFIError service_multiple_ctors_new_without(ref IntPtr context);

        public static unsafe void service_multiple_ctors_new_without_checked(ref IntPtr context)
        {
            var rval = service_multiple_ctors_new_without(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_with_string")]
        public static partial FFIError service_multiple_ctors_new_with_string(ref IntPtr context, [MarshalAs(UnmanagedType.LPStr)] string anon0);

        public static unsafe void service_multiple_ctors_new_with_string_checked(ref IntPtr context, [MarshalAs(UnmanagedType.LPStr)] string anon0)
        {
            var rval = service_multiple_ctors_new_with_string(ref context, anon0);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_failing")]
        public static partial FFIError service_multiple_ctors_new_failing(ref IntPtr context, byte some_value);

        public static unsafe void service_multiple_ctors_new_failing_checked(ref IntPtr context, byte some_value)
        {
            var rval = service_multiple_ctors_new_failing(ref context, some_value);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_destroy")]
        public static partial FFIError service_using_lifetimes_destroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static unsafe void service_using_lifetimes_destroy_checked(ref IntPtr context)
        {
            var rval = service_using_lifetimes_destroy(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_new_with")]
        public static partial FFIError service_using_lifetimes_new_with(ref IntPtr context, ref uint some_value);

        public static unsafe void service_using_lifetimes_new_with_checked(ref IntPtr context, ref uint some_value)
        {
            var rval = service_using_lifetimes_new_with(ref context, ref some_value);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_lifetime_1")]
        public static partial void service_using_lifetimes_lifetime_1(IntPtr context, SliceBool slice);

        public static unsafe void service_using_lifetimes_lifetime_1(IntPtr context, System.ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                service_using_lifetimes_lifetime_1(context, slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_lifetime_2")]
        public static partial void service_using_lifetimes_lifetime_2(IntPtr context, SliceBool slice);

        public static unsafe void service_using_lifetimes_lifetime_2(IntPtr context, System.ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                service_using_lifetimes_lifetime_2(context, slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_return_string_accept_slice")]
        public static partial IntPtr service_using_lifetimes_return_string_accept_slice(IntPtr anon0, SliceU8 anon1);

        public static unsafe string service_using_lifetimes_return_string_accept_slice(IntPtr anon0, System.ReadOnlySpan<byte> anon1)
        {
            fixed (void* ptr_anon1 = anon1)
            {
                var anon1_slice = new SliceU8(new IntPtr(ptr_anon1), (ulong) anon1.Length);
                var s = service_using_lifetimes_return_string_accept_slice(anon0, anon1_slice);;
                return Marshal.PtrToStringAnsi(s);
            }
        }

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_destroy")]
        public static partial FFIError service_various_slices_destroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static unsafe void service_various_slices_destroy_checked(ref IntPtr context)
        {
            var rval = service_various_slices_destroy(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_new")]
        public static partial FFIError service_various_slices_new(ref IntPtr context);

        public static unsafe void service_various_slices_new_checked(ref IntPtr context)
        {
            var rval = service_various_slices_new(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self")]
        public static partial byte service_various_slices_mut_self(IntPtr context, SliceU8 slice);

        public static unsafe byte service_various_slices_mut_self(IntPtr context, System.ReadOnlySpan<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                return service_various_slices_mut_self(context, slice_slice);;
            }
        }

        /// Single line.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_void")]
        public static partial void service_various_slices_mut_self_void(IntPtr context, SliceBool slice);

        /// Single line.
        public static unsafe void service_various_slices_mut_self_void(IntPtr context, System.ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                service_various_slices_mut_self_void(context, slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref")]
        public static partial byte service_various_slices_mut_self_ref(IntPtr context, ref byte x, out byte y);

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref_slice")]
        public static partial byte service_various_slices_mut_self_ref_slice(IntPtr context, ref byte x, out byte y, SliceU8 slice);

        public static unsafe byte service_various_slices_mut_self_ref_slice(IntPtr context, ref byte x, out byte y, System.ReadOnlySpan<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                return service_various_slices_mut_self_ref_slice(context, ref x, out y, slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref_slice_limited")]
        public static partial byte service_various_slices_mut_self_ref_slice_limited(IntPtr context, ref byte x, out byte y, SliceU8 slice, SliceU8 slice2);

        public static unsafe byte service_various_slices_mut_self_ref_slice_limited(IntPtr context, ref byte x, out byte y, System.ReadOnlySpan<byte> slice, System.ReadOnlySpan<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    return service_various_slices_mut_self_ref_slice_limited(context, ref x, out y, slice_slice, slice2_slice);;
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ffi_error")]
        public static partial FFIError service_various_slices_mut_self_ffi_error(IntPtr context, SliceMutU8 slice);

        public static unsafe void service_various_slices_mut_self_ffi_error(IntPtr context, System.Span<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var rval = service_various_slices_mut_self_ffi_error(context, slice_slice);;
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_no_error")]
        public static partial FFIError service_various_slices_mut_self_no_error(IntPtr context, SliceMutU8 slice);

        public static unsafe void service_various_slices_mut_self_no_error(IntPtr context, System.Span<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var rval = service_various_slices_mut_self_no_error(context, slice_slice);;
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_return_slice")]
        public static partial SliceU32 service_various_slices_return_slice(IntPtr context);

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_return_slice_mut")]
        public static partial SliceMutU32 service_various_slices_return_slice_mut(IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_strings_destroy")]
        public static partial FFIError service_strings_destroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static unsafe void service_strings_destroy_checked(ref IntPtr context)
        {
            var rval = service_strings_destroy(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_strings_new")]
        public static partial FFIError service_strings_new(ref IntPtr context);

        public static unsafe void service_strings_new_checked(ref IntPtr context)
        {
            var rval = service_strings_new(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_strings_pass_string")]
        public static partial void service_strings_pass_string(IntPtr context, [MarshalAs(UnmanagedType.LPStr)] string anon1);

        [LibraryImport(NativeLib, EntryPoint = "service_strings_return_string")]
        public static partial IntPtr service_strings_return_string(IntPtr context);

    }

    /// Documented enum.
    public enum EnumDocumented
    {
        /// Variant A.
        A = 0,
        /// Variant B.
        B = 1,
        /// Variant B.
        C = 2,
    }

    public enum EnumRenamed
    {
        X = 0,
    }

    [Serializable]
    [NativeMarshalling(typeof(ArrayMarshaller))]
    public partial struct Array
    {
        public byte[] data;
    }

    [CustomMarshaller(typeof(Array), MarshalMode.Default, typeof(ArrayMarshaller))]
    internal static class ArrayMarshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public fixed byte data[16];
        }

        public static Unmanaged ConvertToUnmanaged(Array managed)
        {
            var result = new Unmanaged
            {
            };

            unsafe
            {
                if(managed.data != null)
                {
                    var source = new ReadOnlySpan<byte>(managed.data, 0, Math.Min(16, managed.data.Length));
                    var dest = new Span<byte>(result.data, 16);
                    source.CopyTo(dest);
                }
            }

            return result;
        }

        public static Array ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new Array()
            {
            };

            unsafe
            {
                var source = new Span<byte>(unmanaged.data, 16);
                var arr_data = new byte[16];
                source.CopyTo(arr_data.AsSpan());
                result.data = arr_data;
            }

            return result;
        }
    }


    [Serializable]
    [NativeMarshalling(typeof(CharArrayMarshaller))]
    public partial struct CharArray
    {
        public string str;
    }

    [CustomMarshaller(typeof(CharArray), MarshalMode.Default, typeof(CharArrayMarshaller))]
    internal static class CharArrayMarshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public fixed byte str[32];
        }

        public static Unmanaged ConvertToUnmanaged(CharArray managed)
        {
            var result = new Unmanaged
            {
            };

            unsafe
            {
                if(managed.str != null)
                {
                    fixed(char* s = managed.str)
                    {
                        var written = Encoding.UTF8.GetBytes(s, managed.str.Length, result.str, 31);
                        result.str[written] = 0;
                    }
                }
            }

            return result;
        }

        public static CharArray ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new CharArray()
            {
            };

            unsafe
            {
                var source = new ReadOnlySpan<byte>(unmanaged.str, 32);
                var terminatorIndex = source.IndexOf<byte>(0);
                result.str = Encoding.UTF8.GetString(source.Slice(0, terminatorIndex == -1 ? Math.Min(source.Length, 32) : terminatorIndex));
            }

            return result;
        }
    }


    [Serializable]
    [NativeMarshalling(typeof(ContainerMarshaller))]
    public partial struct Container
    {
        public Local foreign;
    }

    [CustomMarshaller(typeof(Container), MarshalMode.Default, typeof(ContainerMarshaller))]
    internal static class ContainerMarshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Local foreign;
        }

        public static Unmanaged ConvertToUnmanaged(Container managed)
        {
            var result = new Unmanaged
            {
                foreign = managed.foreign,
            };

            unsafe
            {
            }

            return result;
        }

        public static Container ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new Container()
            {
                foreign = unmanaged.foreign,
            };

            unsafe
            {
            }

            return result;
        }
    }


    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ExtraTypef32
    {
        public float x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Genericu32
    {
        public IntPtr x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Genericu8
    {
        public IntPtr x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Inner
    {
        float x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Local
    {
        uint x;
    }

    [Serializable]
    [NativeMarshalling(typeof(NestedArrayMarshaller))]
    public partial struct NestedArray
    {
        public EnumRenamed field_enum;
        public Vec3f32 field_vec;
        public bool field_bool;
        public int field_int;
        public ushort[] field_array;
        public Array field_struct;
    }

    [CustomMarshaller(typeof(NestedArray), MarshalMode.Default, typeof(NestedArrayMarshaller))]
    internal static class NestedArrayMarshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public EnumRenamed field_enum;
            public Vec3f32 field_vec;
            public sbyte field_bool;
            public int field_int;
            public fixed ushort field_array[5];
            public ArrayMarshaller.Unmanaged field_struct;
        }

        public static Unmanaged ConvertToUnmanaged(NestedArray managed)
        {
            var result = new Unmanaged
            {
                field_enum = managed.field_enum,
                field_vec = managed.field_vec,
                field_bool = Convert.ToSByte(managed.field_bool),
                field_int = managed.field_int,
                field_struct = ArrayMarshaller.ConvertToUnmanaged(managed.field_struct),
            };

            unsafe
            {
                if(managed.field_array != null)
                {
                    var source = new ReadOnlySpan<ushort>(managed.field_array, 0, Math.Min(5, managed.field_array.Length));
                    var dest = new Span<ushort>(result.field_array, 5);
                    source.CopyTo(dest);
                }
            }

            return result;
        }

        public static NestedArray ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new NestedArray()
            {
                field_enum = unmanaged.field_enum,
                field_vec = unmanaged.field_vec,
                field_bool = Convert.ToBoolean(unmanaged.field_bool),
                field_int = unmanaged.field_int,
                field_struct = ArrayMarshaller.ConvertToManaged(unmanaged.field_struct),
            };

            unsafe
            {
                var source = new Span<ushort>(unmanaged.field_array, 5);
                var arr_field_array = new ushort[5];
                source.CopyTo(arr_field_array.AsSpan());
                result.field_array = arr_field_array;
            }

            return result;
        }
    }


    [Serializable]
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public partial struct Packed1
    {
        public byte x;
        public ushort y;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public partial struct Packed2
    {
        public ushort y;
        public byte x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Phantomu8
    {
        public uint x;
    }

    /// Documented struct.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct StructDocumented
    {
        /// Documented field.
        public float x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct StructRenamed
    {
        public EnumRenamed e;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Tupled
    {
        public byte x0;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct UseAsciiStringPattern
    {
        public string ascii_string;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec1
    {
        public float x;
        public float y;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec2
    {
        public double x;
        public double z;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec3f32
    {
        public float x;
        public float y;
        public float z;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Visibility1
    {
        public byte pblc;
        byte prvt;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Visibility2
    {
        public byte pblc1;
        public byte pblc2;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Weird1u32
    {
        uint x;
    }

    [Serializable]
    [NativeMarshalling(typeof(Weird2u8Marshaller))]
    public partial struct Weird2u8
    {
        internal byte t;
        internal byte[] a;
        internal IntPtr r;
    }

    [CustomMarshaller(typeof(Weird2u8), MarshalMode.Default, typeof(Weird2u8Marshaller))]
    internal static class Weird2u8Marshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte t;
            public fixed byte a[5];
            public IntPtr r;
        }

        public static Unmanaged ConvertToUnmanaged(Weird2u8 managed)
        {
            var result = new Unmanaged
            {
                t = managed.t,
                r = managed.r,
            };

            unsafe
            {
                if(managed.a != null)
                {
                    var source = new ReadOnlySpan<byte>(managed.a, 0, Math.Min(5, managed.a.Length));
                    var dest = new Span<byte>(result.a, 5);
                    source.CopyTo(dest);
                }
            }

            return result;
        }

        public static Weird2u8 ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new Weird2u8()
            {
                t = unmanaged.t,
                r = unmanaged.r,
            };

            unsafe
            {
                var source = new Span<byte>(unmanaged.a, 5);
                var arr_a = new byte[5];
                source.CopyTo(arr_a.AsSpan());
                result.a = arr_a;
            }

            return result;
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte InteropDelegate_fn_u8_rval_u8(byte x0);

    public enum FFIError
    {
        Ok = 0,
        Null = 100,
        Panic = 200,
        Delegate = 300,
        Fail = 400,
    }

    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceUseAsciiStringPattern
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceUseAsciiStringPattern : IEnumerable<UseAsciiStringPattern>
    {
        public SliceUseAsciiStringPattern(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceUseAsciiStringPattern(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public unsafe ReadOnlySpan<UseAsciiStringPattern> ReadOnlySpan
        {
            get
            {
                unsafe
                {
                    return new ReadOnlySpan<UseAsciiStringPattern>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe UseAsciiStringPattern this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(UseAsciiStringPattern));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<UseAsciiStringPattern>(ptr);
            }
        }
        public unsafe UseAsciiStringPattern[] Copied
        {
            get
            {
                var rval = new UseAsciiStringPattern[len];
                for (var i = 0; i < (int) len; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<UseAsciiStringPattern> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceVec3f32
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceVec3f32 : IEnumerable<Vec3f32>
    {
        public SliceVec3f32(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceVec3f32(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public unsafe ReadOnlySpan<Vec3f32> ReadOnlySpan
        {
            get
            {
                unsafe
                {
                    return new ReadOnlySpan<Vec3f32>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe Vec3f32 this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (Vec3f32*) data.ToPointer();
                return d[i];
            }
        }
        public unsafe Vec3f32[] Copied
        {
            get
            {
                var rval = new Vec3f32[len];
                fixed (void* dst = rval)
                {
                    Unsafe.CopyBlock(dst, data.ToPointer(), (uint) len * (uint) sizeof(Vec3f32));
                    for (var i = 0; i < (int) len; i++) {
                        rval[i] = this[i];
                    }
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<Vec3f32> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///Option type containing boolean flag and maybe valid data.
    [Serializable]
    [NativeMarshalling(typeof(OptionInnerMarshaller))]
    public partial struct OptionInner
    {
        ///Element that is maybe valid.
        internal Inner t;
        ///Byte where `1` means element `t` is valid.
        internal byte is_some;
    }

    [CustomMarshaller(typeof(OptionInner), MarshalMode.Default, typeof(OptionInnerMarshaller))]
    internal static class OptionInnerMarshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Inner t;
            public byte is_some;
        }

        public static Unmanaged ConvertToUnmanaged(OptionInner managed)
        {
            var result = new Unmanaged
            {
                t = managed.t,
                is_some = managed.is_some,
            };

            unsafe
            {
            }

            return result;
        }

        public static OptionInner ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new OptionInner()
            {
                t = unmanaged.t,
                is_some = unmanaged.is_some,
            };

            unsafe
            {
            }

            return result;
        }
    }


    public partial struct OptionInner
    {
        public static OptionInner FromNullable(Inner? nullable)
        {
            var result = new OptionInner();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public Inner? ToNullable()
        {
            return this.is_some == 1 ? this.t : (Inner?)null;
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackFFISlice(SliceU8 slice);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate Vec3f32 CallbackHugeVecSlice(SliceVec3f32 slice);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CallbackSliceMut(SliceMutU8 slice);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackU8(byte value);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate uint MyCallback(uint value);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void MyCallbackVoid(IntPtr ptr);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void SumDelegate1();

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int SumDelegate2(int x, int y);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate FFIError SumDelegateReturn(int x, int y);

    // Internal helper that works around an issue where exceptions in callbacks don't reenter Rust.
    public class SumDelegateReturnExceptionSafe {
        private Exception failure = null;
        private readonly SumDelegateReturn _callback;

        public SumDelegateReturnExceptionSafe(SumDelegateReturn original)
        {
            _callback = original;
        }

        public FFIError Call(int x, int y)
        {
            try
            {
                return _callback(x, y);
            }
            catch (Exception e)
            {
                failure = e;
                return FFIError.Panic;
            }
        }

        public void Rethrow()
        {
            if (this.failure != null)
            {
                throw this.failure;
            }
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void SumDelegateReturn2(int x, int y);


    public partial class BasicService : IDisposable
    {
        private IntPtr _context;

        private BasicService() {}

        public static BasicService New()
        {
            var self = new BasicService();
            var rval = Interop.basic_service_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.basic_service_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceOnPanic : IDisposable
    {
        private IntPtr _context;

        private ServiceOnPanic() {}

        public static ServiceOnPanic New()
        {
            var self = new ServiceOnPanic();
            var rval = Interop.service_on_panic_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_on_panic_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        public void ReturnResult(uint anon1)
        {
            var rval = Interop.service_on_panic_return_result(_context, anon1);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Methods returning a value need an `on_panic` annotation.
        public uint ReturnDefaultValue(uint x)
        {
            return Interop.service_on_panic_return_default_value(_context, x);
        }

        /// This function has no panic safeguards. It will be a bit faster to
        /// call, but if it panics your host app will be in an undefined state.
        public string ReturnUbOnPanic()
        {
            var s = Interop.service_on_panic_return_ub_on_panic(_context);
            return Marshal.PtrToStringAnsi(s);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceCallbacks : IDisposable
    {
        private IntPtr _context;

        private ServiceCallbacks() {}

        public static ServiceCallbacks New()
        {
            var self = new ServiceCallbacks();
            var rval = Interop.service_callbacks_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_callbacks_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackSimple(MyCallback callback)
        {
            var rval = Interop.service_callbacks_callback_simple(_context, callback);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackFfiReturn(SumDelegateReturn callback)
        {
            var callback_safe_delegate = new SumDelegateReturnExceptionSafe(callback);
            var rval = Interop.service_callbacks_callback_ffi_return(_context, callback_safe_delegate.Call);
            callback_safe_delegate.Rethrow();
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackWithSlice(SumDelegateReturn callback, SliceI32 input)
        {
            var callback_safe_delegate = new SumDelegateReturnExceptionSafe(callback);
            var rval = Interop.service_callbacks_callback_with_slice(_context, callback_safe_delegate.Call, input);
            callback_safe_delegate.Rethrow();
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackWithSlice(SumDelegateReturn callback, System.ReadOnlySpan<int> input)
        {
            Interop.service_callbacks_callback_with_slice(_context, callback, input);
        }

        public void InvokeDelegates()
        {
            var rval = Interop.service_callbacks_invoke_delegates(_context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    public partial class ServiceIgnoringMethods : IDisposable
    {
        private IntPtr _context;

        private ServiceIgnoringMethods() {}

        public static ServiceIgnoringMethods New()
        {
            var self = new ServiceIgnoringMethods();
            var rval = Interop.service_ignoring_methods_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_ignoring_methods_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceMultipleCtors : IDisposable
    {
        private IntPtr _context;

        private ServiceMultipleCtors() {}

        public static ServiceMultipleCtors NewWith(uint some_value)
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_with(ref self._context, some_value);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public static ServiceMultipleCtors NewWithout()
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_without(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public static ServiceMultipleCtors NewWithString([MarshalAs(UnmanagedType.LPStr)] string anon0)
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_with_string(ref self._context, anon0);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public static ServiceMultipleCtors NewFailing(byte some_value)
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_failing(ref self._context, some_value);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_multiple_ctors_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    /// Services can use lifetimes. However, they are more dangerous to use
    /// via FFI, since you will not get any help tracking lifetimes there.
    public partial class ServiceUsingLifetimes : IDisposable
    {
        private IntPtr _context;

        private ServiceUsingLifetimes() {}

        public static ServiceUsingLifetimes NewWith(ref uint some_value)
        {
            var self = new ServiceUsingLifetimes();
            var rval = Interop.service_using_lifetimes_new_with(ref self._context, ref some_value);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_using_lifetimes_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void Lifetime1(SliceBool slice)
        {
            Interop.service_using_lifetimes_lifetime_1(_context, slice);
        }

        public void Lifetime1(System.ReadOnlySpan<Bool> slice)
        {
            Interop.service_using_lifetimes_lifetime_1(_context, slice);
        }

        public void Lifetime2(SliceBool slice)
        {
            Interop.service_using_lifetimes_lifetime_2(_context, slice);
        }

        public void Lifetime2(System.ReadOnlySpan<Bool> slice)
        {
            Interop.service_using_lifetimes_lifetime_2(_context, slice);
        }

        public string ReturnStringAcceptSlice(SliceU8 anon1)
        {
            var s = Interop.service_using_lifetimes_return_string_accept_slice(_context, anon1);
            return Marshal.PtrToStringAnsi(s);
        }

        public string ReturnStringAcceptSlice(System.ReadOnlySpan<byte> anon1)
        {
            return Interop.service_using_lifetimes_return_string_accept_slice(_context, anon1);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceVariousSlices : IDisposable
    {
        private IntPtr _context;

        private ServiceVariousSlices() {}

        public static ServiceVariousSlices New()
        {
            var self = new ServiceVariousSlices();
            var rval = Interop.service_various_slices_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_various_slices_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public byte MutSelf(SliceU8 slice)
        {
            return Interop.service_various_slices_mut_self(_context, slice);
        }

        public byte MutSelf(System.ReadOnlySpan<byte> slice)
        {
            return Interop.service_various_slices_mut_self(_context, slice);
        }

        /// Single line.
        public void MutSelfVoid(SliceBool slice)
        {
            Interop.service_various_slices_mut_self_void(_context, slice);
        }

        /// Single line.
        public void MutSelfVoid(System.ReadOnlySpan<Bool> slice)
        {
            Interop.service_various_slices_mut_self_void(_context, slice);
        }

        public byte MutSelfRef(ref byte x, out byte y)
        {
            return Interop.service_various_slices_mut_self_ref(_context, ref x, out y);
        }

        public byte MutSelfRefSlice(ref byte x, out byte y, SliceU8 slice)
        {
            return Interop.service_various_slices_mut_self_ref_slice(_context, ref x, out y, slice);
        }

        public byte MutSelfRefSlice(ref byte x, out byte y, System.ReadOnlySpan<byte> slice)
        {
            return Interop.service_various_slices_mut_self_ref_slice(_context, ref x, out y, slice);
        }

        public byte MutSelfRefSliceLimited(ref byte x, out byte y, SliceU8 slice, SliceU8 slice2)
        {
            return Interop.service_various_slices_mut_self_ref_slice_limited(_context, ref x, out y, slice, slice2);
        }

        public byte MutSelfRefSliceLimited(ref byte x, out byte y, System.ReadOnlySpan<byte> slice, System.ReadOnlySpan<byte> slice2)
        {
            return Interop.service_various_slices_mut_self_ref_slice_limited(_context, ref x, out y, slice, slice2);
        }

        public void MutSelfFfiError(SliceMutU8 slice)
        {
            var rval = Interop.service_various_slices_mut_self_ffi_error(_context, slice);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void MutSelfFfiError(System.Span<byte> slice)
        {
            Interop.service_various_slices_mut_self_ffi_error(_context, slice);
        }

        public void MutSelfNoError(SliceMutU8 slice)
        {
            var rval = Interop.service_various_slices_mut_self_no_error(_context, slice);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void MutSelfNoError(System.Span<byte> slice)
        {
            Interop.service_various_slices_mut_self_no_error(_context, slice);
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        public SliceU32 ReturnSlice()
        {
            return Interop.service_various_slices_return_slice(_context);
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        public SliceMutU32 ReturnSliceMut()
        {
            return Interop.service_various_slices_return_slice_mut(_context);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceStrings : IDisposable
    {
        private IntPtr _context;

        private ServiceStrings() {}

        public static ServiceStrings New()
        {
            var self = new ServiceStrings();
            var rval = Interop.service_strings_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_strings_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void PassString([MarshalAs(UnmanagedType.LPStr)] string anon1)
        {
            Interop.service_strings_pass_string(_context, anon1);
        }

        public string ReturnString()
        {
            var s = Interop.service_strings_return_string(_context);
            return Marshal.PtrToStringAnsi(s);
        }

        public IntPtr Context => _context;
    }



}
