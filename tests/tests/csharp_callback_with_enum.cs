// <auto-generated>
//
// This file was automatically generated by Interoptopus.
//
// Library:      library
// Hash:         0x1e0f49052a4ff635
// Namespace:    
// Builder:      interoptopus_backend_csharp (0.15.0-alpha.17)
//
// Do not edit this file manually.
//
// </auto-generated>

#pragma warning disable 0105
using System;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using My.Company;
using My.Company.Common;
#pragma warning restore 0105

namespace My.Company
{

    public partial struct MyEnum
    {
        uint _variant;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct MyEnum 
    {


        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal MyEnum ToManaged()
            {
                var _managed = new MyEnum();
                _managed._variant = _variant;
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            return _unmanaged;
        }

        public static MyEnum Enumerator => new() { _variant = 0 };

        public bool IsEnumerator => _variant == 0;

        public void AsEnumerator() { if (_variant != 0) throw ExceptionForVariant(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Enumerator";
            throw new InteropException("Illegal enum state detected. This is a severe error and should never happen.");
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Exception ExceptionForVariant()
        {
            if (_variant == 0) return new EnumException();
            throw new InteropException("Illegal enum state detected. This is a severe error and should never happen.");
        }

        [CustomMarshaller(typeof(MyEnum), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private MyEnum _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(MyEnum managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(MyEnum managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public MyEnum ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void EnumArgumentNative(MyEnum.Unmanaged arg, IntPtr callback_data); // 'True' native callback signature
    public delegate void EnumArgumentDelegate(MyEnum arg); // Our C# signature

    public partial class EnumArgument
    {
        private EnumArgumentDelegate _managed; // C# callback
        private EnumArgumentNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class EnumArgument : IDisposable
    {

        internal EnumArgument() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public EnumArgument(EnumArgumentDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private void CallTrampoline(MyEnum.Unmanaged arg, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(arg.ToManaged());
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal void Call(MyEnum arg)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<EnumArgumentNative>(_ptr);
            // TODO
            // __target(arg.ToManaged());
            return;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var rval = new Unmanaged();
            rval._callback = _ptr;
            rval._data = IntPtr.Zero;
            return rval;
        }

        [CustomMarshaller(typeof(EnumArgument), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _callback;
            internal IntPtr _data;

            public EnumArgument ToManaged()
            {
                var rval = new EnumArgument();
                rval._ptr = _callback;
                return rval;
            }

        }

        public ref struct Marshaller
        {
            private EnumArgument _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(EnumArgument managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(EnumArgument managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public EnumArgument ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate MyEnum.Unmanaged EnumReturnNative(IntPtr callback_data); // 'True' native callback signature
    public delegate MyEnum EnumReturnDelegate(); // Our C# signature

    public partial class EnumReturn
    {
        private EnumReturnDelegate _managed; // C# callback
        private EnumReturnNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class EnumReturn : IDisposable
    {

        internal EnumReturn() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public EnumReturn(EnumReturnDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private MyEnum.Unmanaged CallTrampoline(IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed().ToUnmanaged();
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal MyEnum Call()
        {
            var __target = Marshal.GetDelegateForFunctionPointer<EnumReturnNative>(_ptr);
            // TODO
            // return __target();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var rval = new Unmanaged();
            rval._callback = _ptr;
            rval._data = IntPtr.Zero;
            return rval;
        }

        [CustomMarshaller(typeof(EnumReturn), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _callback;
            internal IntPtr _data;

            public EnumReturn ToManaged()
            {
                var rval = new EnumReturn();
                rval._ptr = _callback;
                return rval;
            }

        }

        public ref struct Marshaller
        {
            private EnumReturn _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(EnumReturn managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(EnumReturn managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public EnumReturn ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }




    public class EnumException() : InteropException($"Enum variant mismatch.")  { }

    public class EnumException<T>(T t) : InteropException($"Enum variant mismatch.")
    {
        public T Value { get; } = t;
    }

    public class InteropException(string text) : Exception(text) { }
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void AsyncHelperNative(IntPtr data, IntPtr callback_data);
    public delegate void AsyncHelperDelegate(IntPtr data);

    public partial struct AsyncHelper
    {
        private AsyncHelperDelegate _managed;
        private AsyncHelperNative _native;
        private IntPtr _ptr;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct AsyncHelper : IDisposable
    {
        public AsyncHelper() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public AsyncHelper(AsyncHelperDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        void Call(IntPtr data, IntPtr _)
        {
            _managed(data);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_ptr);
            _ptr = IntPtr.Zero;
        }

        [CustomMarshaller(typeof(AsyncHelper), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private AsyncHelper _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(AsyncHelper managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed._ptr;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public AsyncHelper ToManaged()
            {
                _managed = new AsyncHelper();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }

    public delegate void AsyncCallbackCommon(IntPtr data, IntPtr callback_data);

    [StructLayout(LayoutKind.Sequential)]
    public partial struct AsyncCallbackCommonNative
    {
        internal IntPtr _ptr;
        internal IntPtr _ts;
    }
    public partial class Utf8String
    {
        IntPtr _ptr;
        ulong _len;
        ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Utf8String : IDisposable
    {
        private Utf8String() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String From(string s)
        {
            var rval = new Utf8String();
            var source = s.AsSpan();
            Span<byte> utf8Bytes = stackalloc byte[Encoding.UTF8.GetByteCount(source)];
            var len = Encoding.UTF8.GetBytes(source, utf8Bytes);

            fixed (byte* p = utf8Bytes)
            {
                InteropHelper.interoptopus_string_create((IntPtr)p, (ulong)len, out var native);
                rval._ptr = native._ptr;
                rval._len = native._len;
                rval._capacity = native._capacity;
            }

            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String Empty()
        {
            InteropHelper.interoptopus_string_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }


        public unsafe string String
        {
            get
            {
                var span = new ReadOnlySpan<byte>((byte*)_ptr, (int)_len);
                var s = Encoding.UTF8.GetString(span);
                return s;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public string IntoString()
        {
            var rval = String;
            Dispose();
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_string_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Utf8String Clone()
        {
            var _new = new Unmanaged();
            var _this = AsUnmanaged();
            InteropHelper.interoptopus_string_clone(ref _this, ref _new);
            return _new.IntoManaged();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) { throw new Exception(); }
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            _ptr = IntPtr.Zero;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr _ptr;
            public ulong _len;
            public ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Utf8String IntoManaged()
            {
                var _managed = new Utf8String();
                _managed._ptr = _ptr;
                _managed._len = _len;
                _managed._capacity = _capacity;
                return _managed;
            }

        }

        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_create")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            
            public static partial long interoptopus_string_create(IntPtr utf8, ulong len, out Unmanaged rval);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_destroy")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            
            public static partial long interoptopus_string_destroy(Unmanaged utf8);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_clone")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            
            public static partial long interoptopus_string_clone(ref Unmanaged orig, ref Unmanaged cloned);
        }

        [CustomMarshaller(typeof(Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Utf8String _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Unmanaged ToUnmanaged()
            {
                return _managed.IntoUnmanaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Utf8String ToManaged()
            {
                return _unmanaged.IntoManaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }

    public static class StringExtensions
    {
        public static Utf8String Utf8(this string s) { return Utf8String.From(s); }
    }
}
